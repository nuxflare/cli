/// <reference path="./.sst/platform/config.d.ts" />

import { writeFileSync, mkdirSync, existsSync } from "node:fs";
import * as path from "node:path";
import { loadNuxtConfig } from "nuxt/kit";

function generateUUID() {
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
    const r = (Math.random() * 16) | 0;
    const v = c === "x" ? r : (r & 0x3) | 0x8;
    return v.toString(16);
  });
}

export default $config({
  app(input) {
    return {
      name: "__PROJECT_NAME__",
      removal: input?.stage === "production" ? "retain" : "remove",
      home: "cloudflare",
      providers: { command: "1.0.1", random: "4.16.8" },
    };
  },
  async run() {
    const nuxtHubSecret = new sst.Secret("NuxtHub", generateUUID());
    const environment = new sst.Secret("Env", "{}");
    const nuxtConfig = await loadNuxtConfig({});
    const hubConfig = nuxtConfig.hub || {};
    const wrangler: Record<string, any> = {
      name: `${$app.name}-${$app.stage}`,
      main: "./dist/server/index.mjs",
      compatibility_date: "2024-12-05",
      assets: {
        directory: "./dist/public/",
        binding: "ASSETS",
      },
      compatibility_flags: ["nodejs_compat"],
      vars: environment.value.apply((env) => {
        let parsedEnv = {};
        try {
          parsedEnv = JSON.parse(env);
        } catch {
          // ignore
        }
        const vars = {
          NUXT_HUB_PROJECT_SECRET_KEY: nuxtHubSecret.value,
          ...parsedEnv,
        };
        return vars;
      }),
    };
    const database: {
      name: any;
    } = { name: undefined };
    const resources = [];
    if (hubConfig.database) {
      const d1 = new sst.cloudflare.D1("DB");
      resources.push(d1);
      wrangler.d1_databases ||= [];
      wrangler.d1_databases.push({
        binding: "DB",
        database_name: d1.nodes.database.name,
        database_id: d1.id,
        migrations_dir: "dist/database/migrations",
      });
      database.name = d1.nodes.database.name;
    }
    if (hubConfig.ai) {
      wrangler.ai = {
        binding: "AI",
      };
    }
    if (hubConfig.kv) {
      const kv = new sst.cloudflare.Kv("KV");
      resources.push(kv);
      wrangler.kv_namespaces ||= [];
      wrangler.kv_namespaces.push({
        binding: "KV",
        id: kv.id,
      });
    }
    if (hubConfig.cache) {
      const cache = new sst.cloudflare.Kv("CACHE");
      resources.push(cache);
      wrangler.kv_namespaces ||= [];
      wrangler.kv_namespaces.push({
        binding: "CACHE",
        id: cache.id,
      });
    }
    if (hubConfig.blob) {
      const blob = new sst.cloudflare.Bucket("BLOB");
      resources.push(blob);
      wrangler.r2_buckets ||= [];
      wrangler.r2_buckets.push({
        binding: "BLOB",
        bucket_name: blob.name,
      });
    }
    if (hubConfig.vectorize) {
      for (const [name, config] of Object.entries(hubConfig.vectorize)) {
        const indexName = `${$app.name}-${$app.stage}-${name}`;
        const index = new command.local.Command(`Vector${indexName}`, {
          create: `__NPX__ wrangler vectorize create ${indexName} --dimensions=${config.dimensions} --metric=${config.metric}`,
          delete: `__NPX__ wrangler vectorize delete ${indexName} --force`,
        });
        resources.push(index);
        for (const [propertyName, type] of Object.entries(
          config.metadataIndexes || {},
        )) {
          new command.local.Command(
            `MetadataIndex${indexName}${propertyName}`,
            {
              create: `__NPX__ wrangler vectorize create-metadata-index ${indexName} --property-name=${propertyName} --type=${type}`,
              delete: `__NPX__ wrangler vectorize delete-metadata-index ${indexName} --property-name=${propertyName}`,
            },
            {
              dependsOn: [index],
            },
          );
        }
        wrangler.vectorize ||= [];
        wrangler.vectorize.push({
          binding: `VECTORIZE_${name.toUpperCase()}`,
          index_name: index.stdout.apply(() => indexName),
        });
      }
    }
    $resolve(wrangler).apply((wrangler) => {
      const configDir = ".sst/nuxflare";
      const configPath = path.resolve("wrangler.json");
      if (!existsSync(configDir)) {
        mkdirSync(configDir, { recursive: true });
      }
      writeFileSync(configPath, JSON.stringify(wrangler, null, 2));
      const build = new command.local.Command(`WorkerBuild${$app.stage}`, {
        dir: path.resolve("."),
        create: "NITRO_PRESET=cloudflare_module __NPM__ run build",
        triggers: [new Date().toString()],
      });
      const deploy = new command.local.Command(
        `WorkerDeploy${$app.stage}`,
        {
          dir: path.resolve("."),
          create: `__NPX__ wrangler deploy --config ${configPath}`,
          update: `__NPX__ wrangler deploy --config ${configPath}`,
          delete: `__NPX__ wrangler delete`,
          triggers: [new Date().toString()],
        },
        {
          dependsOn: [build, ...resources],
        },
      );
      if (hubConfig.database) {
        $resolve(database.name).apply((name) => {
          new command.local.Command(
            `Migrations${$app.stage}`,
            {
              dir: path.resolve("."),
              create: `__NPX__ wrangler d1 migrations apply ${name} --remote`,
              triggers: [new Date().toString()],
            },
            {
              dependsOn: [build],
            },
          );
        });
      }

      const deployUrl = deploy.stdout.apply(
        (output) => output.match(/https:\/\/[^\s]*/g)?.[0],
      );
      $resolve([deployUrl, nuxtHubSecret.value]).apply(([url, secret]) => {
        const nuxthubConfig = {
          url,
          secret,
        };
        const nuxthubPath = path.join(configDir, `nuxthub_${$app.stage}.json`);
        writeFileSync(nuxthubPath, JSON.stringify(nuxthubConfig, null, 2));
      });
    });
  },
});
